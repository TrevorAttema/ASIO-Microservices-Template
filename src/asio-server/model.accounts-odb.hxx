// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef MODEL_ACCOUNTS_ODB_HXX
#define MODEL_ACCOUNTS_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "model.accounts.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/session.hxx>
#include <odb/cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // account
  //
  template <>
  struct class_traits< ::model::accounts::account >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::model::accounts::account >
  {
    public:
    typedef ::model::accounts::account object_type;
    typedef ::model::accounts::account* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    odb::pointer_cache_traits<
      pointer_type,
      odb::session >
    pointer_cache_traits;

    typedef
    odb::reference_cache_traits<
      object_type,
      odb::session >
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // date_fields
  //
  template <>
  class access::composite_value_traits< ::model::accounts::date_fields, id_mysql >
  {
    public:
    typedef ::model::accounts::date_fields value_type;

    struct image_type
    {
      // created_
      //
      long long created_value;
      my_bool created_null;

      // updated_
      //
      long long updated_value;
      my_bool updated_null;

      // deleted_
      //
      long long deleted_value;
      my_bool deleted_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);

    static const std::size_t column_count = 3UL;
  };

  // session
  //
  template <>
  class access::composite_value_traits< ::model::accounts::session, id_mysql >
  {
    public:
    typedef ::model::accounts::session value_type;

    struct image_type
    {
      // session_
      //
      details::buffer session_value;
      unsigned long session_size;
      my_bool session_null;

      // sessionTime_
      //
      long long sessionTime_value;
      my_bool sessionTime_null;
    };

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          mysql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              mysql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // account
  //
  template <typename A>
  struct query_columns< ::model::accounts::account, id_mysql, A >
  {
    // id
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        long unsigned int,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    id_type_;

    static const id_type_ id;

    // email
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    email_type_;

    static const email_type_ email;

    // email_verified
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::time_t,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    email_verified_type_;

    static const email_verified_type_ email_verified;

    // sms
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    sms_type_;

    static const sms_type_ sms;

    // sms_status
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::model::accounts::SMSStatus,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    sms_status_type_;

    static const sms_status_type_ sms_status;

    // first_name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    first_name_type_;

    static const first_name_type_ first_name;

    // surname
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    surname_type_;

    static const surname_type_ surname;

    // dob
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::time_t,
        mysql::id_longlong >::query_type,
      mysql::id_longlong >
    dob_type_;

    static const dob_type_ dob;

    // notes
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    notes_type_;

    static const notes_type_ notes;

    // password
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    password_type_;

    static const password_type_ password;

    // status
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::model::accounts::AccountStatus,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    status_type_;

    static const status_type_ status;

    // email_status
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::model::accounts::EmailStatus,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    email_status_type_;

    static const email_status_type_ email_status;

    // email_contact_status
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::model::accounts::EmailContact,
        mysql::id_enum >::query_type,
      mysql::id_enum >
    email_contact_status_type_;

    static const email_contact_status_type_ email_contact_status;

    // session
    //
    struct session_class_
    {
      session_class_ ()
      {
      }

      // session
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::std::string,
          mysql::id_string >::query_type,
        mysql::id_string >
      session_type_;

      static const session_type_ session;

      // sessionTime
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::query_type,
        mysql::id_longlong >
      sessionTime_type_;

      static const sessionTime_type_ sessionTime;
    };

    static const session_class_ session;

    // dates
    //
    struct dates_class_
    {
      dates_class_ ()
      {
      }

      // created
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::query_type,
        mysql::id_longlong >
      created_type_;

      static const created_type_ created;

      // updated
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::query_type,
        mysql::id_longlong >
      updated_type_;

      static const updated_type_ updated;

      // deleted
      //
      typedef
      mysql::query_column<
        mysql::value_traits<
          ::time_t,
          mysql::id_longlong >::query_type,
        mysql::id_longlong >
      deleted_type_;

      static const deleted_type_ deleted;
    };

    static const dates_class_ dates;
  };

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::id_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  id (A::table_name, "`id`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::email_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  email (A::table_name, "`email`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::email_verified_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  email_verified (A::table_name, "`email_verified`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::sms_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  sms (A::table_name, "`sms`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::sms_status_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  sms_status (A::table_name, "`sms_status`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::first_name_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  first_name (A::table_name, "`first_name`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::surname_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  surname (A::table_name, "`surname`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::dob_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  dob (A::table_name, "`dob`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::notes_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  notes (A::table_name, "`notes`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::password_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  password (A::table_name, "`password`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::status_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  status (A::table_name, "`status`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::email_status_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  email_status (A::table_name, "`email_status`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::email_contact_status_type_
  query_columns< ::model::accounts::account, id_mysql, A >::
  email_contact_status (A::table_name, "`email_contact_status`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::session_class_::session_type_
  query_columns< ::model::accounts::account, id_mysql, A >::session_class_::
  session (A::table_name, "`session_session`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::session_class_::sessionTime_type_
  query_columns< ::model::accounts::account, id_mysql, A >::session_class_::
  sessionTime (A::table_name, "`session_sessionTime`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::session_class_
  query_columns< ::model::accounts::account, id_mysql, A >::session;

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::dates_class_::created_type_
  query_columns< ::model::accounts::account, id_mysql, A >::dates_class_::
  created (A::table_name, "`dates_created`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::dates_class_::updated_type_
  query_columns< ::model::accounts::account, id_mysql, A >::dates_class_::
  updated (A::table_name, "`dates_updated`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::dates_class_::deleted_type_
  query_columns< ::model::accounts::account, id_mysql, A >::dates_class_::
  deleted (A::table_name, "`dates_deleted`", 0);

  template <typename A>
  const typename query_columns< ::model::accounts::account, id_mysql, A >::dates_class_
  query_columns< ::model::accounts::account, id_mysql, A >::dates;

  template <typename A>
  struct pointer_query_columns< ::model::accounts::account, id_mysql, A >:
    query_columns< ::model::accounts::account, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::model::accounts::account, id_mysql >:
    public access::object_traits< ::model::accounts::account >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      unsigned long long id_value;
      my_bool id_null;

      // email_
      //
      details::buffer email_value;
      unsigned long email_size;
      my_bool email_null;

      // email_verified_
      //
      long long email_verified_value;
      my_bool email_verified_null;

      // sms_
      //
      details::buffer sms_value;
      unsigned long sms_size;
      my_bool sms_null;

      // sms_status_
      //
      mysql::value_traits< ::model::accounts::SMSStatus, mysql::id_enum >::image_type sms_status_value;
      unsigned long sms_status_size;
      my_bool sms_status_null;

      // first_name_
      //
      details::buffer first_name_value;
      unsigned long first_name_size;
      my_bool first_name_null;

      // surname_
      //
      details::buffer surname_value;
      unsigned long surname_size;
      my_bool surname_null;

      // dob_
      //
      long long dob_value;
      my_bool dob_null;

      // notes_
      //
      details::buffer notes_value;
      unsigned long notes_size;
      my_bool notes_null;

      // password_
      //
      details::buffer password_value;
      unsigned long password_size;
      my_bool password_null;

      // status_
      //
      mysql::value_traits< ::model::accounts::AccountStatus, mysql::id_enum >::image_type status_value;
      unsigned long status_size;
      my_bool status_null;

      // email_status_
      //
      mysql::value_traits< ::model::accounts::EmailStatus, mysql::id_enum >::image_type email_status_value;
      unsigned long email_status_size;
      my_bool email_status_null;

      // email_contact_status_
      //
      mysql::value_traits< ::model::accounts::EmailContact, mysql::id_enum >::image_type email_contact_status_value;
      unsigned long email_contact_status_size;
      my_bool email_contact_status_null;

      // session_
      //
      composite_value_traits< ::model::accounts::session, id_mysql >::image_type session_value;

      // dates_
      //
      composite_value_traits< ::model::accounts::date_fields, id_mysql >::image_type dates_value;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 18UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::model::accounts::account, id_common >:
    public access::object_traits_impl< ::model::accounts::account, id_mysql >
  {
  };

  // account
  //
}

#include "model.accounts-odb.ixx"

#include <odb/post.hxx>

#endif // MODEL_ACCOUNTS_ODB_HXX
